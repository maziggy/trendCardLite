class TrendCardLite extends HTMLElement {
    constructor() {
        super();
        this.lastStates = {}; // To store previous states and avoid redundant updates
    }

    setConfig(config) {
        this.config = config;

        const root = this.attachShadow({ mode: "open" });
        root.innerHTML = `
            <style>
                .main-container {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: center;
                    width: 100%;
                    color: #ffffff;
                    background-color: #2c2c2e;
                    border-radius: 10px;
                    padding: 12px;
                    box-shadow: 2px 4px 10px rgba(0, 0, 0, 0.2);
                    position: relative;
                    box-sizing: border-box;
                    overflow: hidden;
                }

                .trend-cards {
                    display: flex;
                    justify-content: space-around;
                    width: 100%;
                    gap: 5px;
                }

                .trend-card {
                    background-color: #333333;
                    border-radius: 20px;
                    padding: 8px 12px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    text-align: center;
                    flex: 1;
                    min-width: 90px;
                    color: #d0d0d0;
                    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.5);
                    cursor: pointer;
                }

                .trend-card .icon {
                    font-size: 13px;
                    color: #4ff24b;
                    margin-right: 5px;
                }

                .trend-card .value {
                    font-size: 13px;
                    font-weight: bold;
                    margin-right: 4px;
                }

                .trend-card .label {
                    font-size: 13px;
                    font-weight: bold;
                    color: #d0d0d0;
                    margin-left: 5px;
                }
            </style>

            <div class="main-container">
                <div class="trend-cards" id="trend-cards-container">
                    <!-- Metric cards will be injected here based on the configuration -->
                </div>
            </div>
        `;

        this.createMetricCards(); // Dynamically add metric cards based on config
    }

    createMetricCards() {
        const container = this.shadowRoot.getElementById("trend-cards-container");
        container.innerHTML = ''; // Clear any existing cards

        const metrics = [
            { id: 'temp', configKey: 'temperature_delta', iconId: 'temp-icon', deltaId: 'temp-delta', labelId: 'temp-label' },
            { id: 'vpd', configKey: 'vpd_delta', iconId: 'vpd-icon', deltaId: 'vpd-delta', labelId: 'vpd-label' },
            { id: 'hum', configKey: 'humidity_delta', iconId: 'hum-icon', deltaId: 'hum-delta', labelId: 'hum-label' }
        ];

        metrics.forEach(metric => {
            if (this.config[metric.configKey]) {
                const card = document.createElement("div");
                card.classList.add("trend-card");
                card.id = `${metric.id}-card`;

                card.innerHTML = `
                    <ha-icon class="icon" id="${metric.iconId}" icon="mdi:equal"></ha-icon>
                    <div class="value" id="${metric.deltaId}">0.0</div>
                    <div class="label" id="${metric.labelId}">${metric.label}</div>
                `;

                card.addEventListener("click", () => {
                    this._showMoreInfo(this.config[metric.configKey]);
                });

                container.appendChild(card);
            }
        });
    }

set hass(hass) {
    const config = this.config;

    // Debug: Log entire hass.states for growbox_water_ph_last
    console.log("State of sensor.growbox_water_ph_last:", hass.states[config.vpd_delta]);

    const newState = {
        temperatureDelta: config.temperature_delta ? hass.states[config.temperature_delta]?.state || "0.0" : null,
        humidityDelta: config.humidity_delta ? hass.states[config.humidity_delta]?.state || "0.0" : null,
        vpdDelta: config.vpd_delta ? hass.states[config.vpd_delta]?.state || "0.0" : null
    };

    console.log("Temperature Delta:", newState.temperatureDelta, "Friendly Name:", hass.states[config.temperature_delta]?.attributes.friendly_name || "Temp");
    console.log("Humidity Delta:", newState.humidityDelta, "Friendly Name:", hass.states[config.humidity_delta]?.attributes.friendly_name || "Hum");
    console.log("VPD Delta:", newState.vpdDelta, "Friendly Name:", hass.states[config.vpd_delta]?.attributes.friendly_name || "VPD");

    if (JSON.stringify(newState) === JSON.stringify(this.lastStates)) return;
    this.lastStates = newState;

    if (config.temperature_delta) {
        this.shadowRoot.getElementById("temp-delta").innerText = newState.temperatureDelta;
        const tempFriendlyName = hass.states[config.temperature_delta]?.attributes.friendly_name || "Temp";
        this.updateLabel("temp-label", tempFriendlyName);
        this.updateIconColor(this.shadowRoot.getElementById("temp-icon"), newState.temperatureDelta);
    }
    if (config.vpd_delta) {
        this.shadowRoot.getElementById("vpd-delta").innerText = newState.vpdDelta;
        const vpdFriendlyName = hass.states[config.vpd_delta]?.attributes.friendly_name || "VPD";
        this.updateLabel("vpd-label", vpdFriendlyName);
        this.updateIconColor(this.shadowRoot.getElementById("vpd-icon"), newState.vpdDelta);
    }
    if (config.humidity_delta) {
        this.shadowRoot.getElementById("hum-delta").innerText = newState.humidityDelta;
        const humFriendlyName = hass.states[config.humidity_delta]?.attributes.friendly_name || "Hum";
        this.updateLabel("hum-label", humFriendlyName);
        this.updateIconColor(this.shadowRoot.getElementById("hum-icon"), newState.humidityDelta);
    }
}

    updateLabel(id, text) {
        const label = this.shadowRoot.getElementById(id);
        if (label && label.innerText !== text) {
            label.innerText = text;
        }
    }

    updateIconColor(iconElement, delta) {
        const value = parseFloat(delta);
        if (value > 0) {
            iconElement.setAttribute("icon", "mdi:arrow-up");
            iconElement.style.color = "#ff4c4c";
        } else if (value < 0) {
            iconElement.setAttribute("icon", "mdi:arrow-down");
            iconElement.style.color = "#498bff";
        } else {
            iconElement.setAttribute("icon", "mdi:equal");
            iconElement.style.color = "#4ff24b";
        }
    }

    _showMoreInfo(entityId) {
        const event = new Event("hass-more-info", { bubbles: true, composed: true });
        event.detail = { entityId };
        this.dispatchEvent(event);
    }

    getCardSize() {
        return 1;
    }
}

// Use a valid custom element name with a hyphen
customElements.define("trend-card-lite", TrendCardLite);
