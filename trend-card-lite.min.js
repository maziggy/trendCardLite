class TrendCardLite extends HTMLElement {
    constructor() {
        super();
        this.lastStates = {};
    }

    setConfig(config) {
        this.config = config;

        const root = this.attachShadow({ mode: "open" });
        root.innerHTML = `
            <style>
                * {
                    font-family: 'Roboto', sans-serif;
                    box-sizing: border-box;
                }

                .main-container {
                    display: flex;
                    width: 100%;
                    color: #ffffff;
                    background-color: #2c2c2e;
                    border-radius: 10px;
                    padding: 5px; /* Increased padding around main container */
                    border: 1px solid #3f5361;
                    overflow: hidden;
                }

                .trend-cards {
                    display: flex;
                    justify-content: space-around; /* Equal spacing between cards */
                    gap: 5px; /* Space between each trend card */
                    width: 100%;
                }

                .trend-card {
                    flex: 1;
                    background-color: #2c4b57;
                    border-radius: 8px;
                    padding: 8px; /* Increased padding inside each card */
                    display: flex;
                    align-items: center;
                    justify-content: space-around;
                    color: #ffffff;
                    font-size: 12px;
                    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
                }

                .icon-container {
                    width: 35px;
                    height: 35px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 50%;
                    font-size: 12px;
                    font-weight: bold;
                    color: white;
                    background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(0, 0, 0, 0.05));
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
                }

                /* Individual Bubble Colors */
                #metric1-card .icon-container {
                    background: linear-gradient(135deg, #4a90e2, #0073e6);
                }

                #metric2-card .icon-container {
                    background: linear-gradient(135deg, #f5a623, #e08f00);
                }

                #metric3-card .icon-container {
                    background: linear-gradient(135deg, #bd10e0, #a20094);
                }

                .value {
                    font-size: 1.1rem;
                    font-weight: bold;
                    color: #ffffff;
                    cursor: pointer;
                    transition: color 0.3s;
                    margin-left: 5px;
                }

                .value:hover {
                    color: #f5b200;
                }

                .trend-indicator {
                    display: flex;
                    align-items: center;
                    font-size: 20px;
                    margin-left: 3px;
                }

                .trend-indicator svg {
                    margin-right: -5px;
                    padding: 0;
                    display: block;
                }

                .trend-indicator svg:last-child {
                    margin-right: 0;
                }

                /* Indicator Colors */
                .indicator-down {
                    color: #498bff;
                }

                .indicator-equal {
                    color: #4ff24b;
                }

                .indicator-up {
                    color: #ff4c4c;
                }

                /* Dimmed Indicator */
                .indicator-dimmed {
                    opacity: 0.1;
                }

            </style>

            <div class="main-container">
                <div class="trend-cards" id="trend-cards-container"></div>
            </div>
        `;

        this.renderMetrics();
    }

    renderMetrics() {
        const container = this.shadowRoot.getElementById("trend-cards-container");
        container.innerHTML = ""; // Clear previous metrics

        // Check each metric and create the corresponding HTML if it exists
        if (this.config.metric1_delta) {
            container.innerHTML += this.createMetricCard("metric1", this.config.metric1_delta_name || "Temp");
        }
        if (this.config.metric2_delta) {
            container.innerHTML += this.createMetricCard("metric2", this.config.metric2_delta_name || "Hum");
        }
        if (this.config.metric3_delta) {
            container.innerHTML += this.createMetricCard("metric3", this.config.metric3_delta_name || "VPD");
        }
    }

    createMetricCard(metricId, title) {
        return `
            <div class="trend-card" id="${metricId}-card">
                <div class="icon-container" title="${title}">
                    ${title}
                </div>
                <div class="value" id="${metricId}"></div>
                <div class="trend-indicator" id="${metricId}-indicator">
                    <svg class="indicator-down indicator-dimmed" id="${metricId}-down" width="20" height="20" viewBox="0 0 24 24"><path fill="#498bff" d="M12 16l-6-6h12z"/></svg>
                    <svg class="indicator-equal indicator-dimmed" id="${metricId}-equal" width="20" height="20" viewBox="0 0 24 24"><path fill="#4ff24b" d="M5 11h14v2H5z"/></svg>
                    <svg class="indicator-up indicator-dimmed" id="${metricId}-up" width="20" height="20" viewBox="0 0 24 24"><path fill="#ff4c4c" d="M12 8l6 6H6z"/></svg>
                </div>
            </div>
        `;
    }

    set hass(hass) {
        const newState = {};
        let hasChanges = false;

        // Only add properties for metrics that are defined in the configuration
        if (this.config.metric1_delta) {
            newState.metric1Delta = hass.states[this.config.metric1_delta]?.state || "0.0";
            hasChanges = hasChanges || this.lastStates.metric1Delta !== newState.metric1Delta;
            this.shadowRoot.getElementById("metric1").onclick = () =>
                this._showMoreInfo(this.config.metric1_delta); // Use this.config instead of config
        }
        if (this.config.metric2_delta) {
            newState.metric2Delta = hass.states[this.config.metric2_delta]?.state || "0.0";
            hasChanges = hasChanges || this.lastStates.metric2Delta !== newState.metric2Delta;
            this.shadowRoot.getElementById("metric2").onclick = () =>
                this._showMoreInfo(this.config.metric2_delta); // Use this.config instead of config
        }
        if (this.config.metric3_delta) {
            newState.metric3Delta = hass.states[this.config.metric3_delta]?.state || "0.0";
            hasChanges = hasChanges || this.lastStates.metric3Delta !== newState.metric3Delta;
            this.shadowRoot.getElementById("metric3").onclick = () =>
                this._showMoreInfo(this.config.metric3_delta); // Use this.config instead of config
        }

        // If no changes, exit early
        if (!hasChanges) return;

        this.lastStates = newState;

        // Update only the visible metrics
        if (this.config.metric1_delta) {
            this.shadowRoot.getElementById("metric1").innerText = newState.metric1Delta;
            this.updateTrendIndicator("metric1", newState.metric1Delta);
        }
        if (this.config.metric2_delta) {
            this.shadowRoot.getElementById("metric2").innerText = newState.metric2Delta;
            this.updateTrendIndicator("metric2", newState.metric2Delta);
        }
        if (this.config.metric3_delta) {
            this.shadowRoot.getElementById("metric3").innerText = newState.metric3Delta;
            this.updateTrendIndicator("metric3", newState.metric3Delta);
        }
    }

    _showMoreInfo(entityId) {
        const event = new Event("hass-more-info", {
            bubbles: true,
            composed: true,
        });
        event.detail = { entityId };
        this.dispatchEvent(event);
    }

    updateTrendIndicator(metricId, delta) {
        const upArrow = this.shadowRoot.getElementById(`${metricId}-up`);
        const downArrow = this.shadowRoot.getElementById(`${metricId}-down`);
        const equalSign = this.shadowRoot.getElementById(`${metricId}-equal`);

        upArrow.classList.add("indicator-dimmed");
        downArrow.classList.add("indicator-dimmed");
        equalSign.classList.add("indicator-dimmed");

        if (parseFloat(delta) > 0) {
            upArrow.classList.remove("indicator-dimmed");
        } else if (parseFloat(delta) < 0) {
            downArrow.classList.remove("indicator-dimmed");
        } else {
            equalSign.classList.remove("indicator-dimmed");
        }
    }
}

customElements.define("trend-card-lite", TrendCardLite);
